% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.utils.R
\name{multithread_terms}
\alias{multithread_terms}
\alias{set.multithread_terms}
\alias{get.multithread_terms}
\title{Multithreaded evaluation of change statistics}
\usage{
set.multithread_terms(x)

get.multithread_terms(x)
}
\arguments{
\item{x}{a logical flag to set whether multithreading will be
attempted; is \code{FALSE} on loading}
}
\value{
Both functions return the new state of the multithreading
flag, \code{set.parallel_terms()} invisibly.
}
\description{
Query and control whether \code{ergm} package's C code will attempt to
evaluate qualified terms' change statistics in multiple threads.
}
\details{
Dividing up change statistics into multiple threads
executed in parallel can speed up summary statistic calculation
and MCMC sampling by evaluating different terms in
parallel. However, it introduces a significant computational
overhead. The following are the major factors affecting whether
it is worthwhile:
\itemize{
\item The more terms with statistics the model has, the more
benefit from parallel execution.
\item The more expensive the terms in the model are, the more benefit
from parallel execution. For example, models with terms like
\code{\link{gwdsp}} will generally get more benefit than models where all
terms are dyad-independent.
\item Sampling more dense networks will generally get more benefit than
sparse networks. Network size has little, if any, effect.
\item More CPUs/cores usually give greater speed-up, but only up to a
point, because the amount of overhead grows with the number of
threads; it is often better to ``batch'' the terms into a smaller
number of threads than possible. On Unix-alikes, running \R with
environmental variable \code{OMP_THREAD_LIMIT} set to a limit can be
used to do this.
\item Any other workload on the system will have a more severe effect
on multithreaded execution. In particular, do not run more
threads than CPUs/cores that you want to allocate to the tasks.
}
}
\note{
This flag is a setting global to the \code{ergm} package and all
of its C functions, including when called from other packages via
the \code{Linking-To} mechanism.

These functions only set the flag; they do \emph{not} set limits
on the number of processes.
}
